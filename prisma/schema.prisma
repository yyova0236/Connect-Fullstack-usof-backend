generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    USER
}

enum PostStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

enum LikeType {
  LIKE
  DISLIKE
}

model User {
    id             Int      @id @default(autoincrement())
    login          String   @unique
    password       String
    fullName       String   @map("full_name")
    email          String   @unique
    profilePicture String?  @map("profile_picture")
    rating         Int      @default(0)
    role           Role     @default(USER)
    status         String   @default("ACTIVE")

    resets         PasswordReset[]
    posts          Post[]  
    comments       Comment[]  
    likes          Like[]
}


model PasswordReset {
    id        Int      @id @default(autoincrement())
    userId    Int      @map("user_id")
    token     String   @unique
    expiresAt DateTime @map("expires_at")

    user      User     @relation(fields: [userId], references: [id])

    @@index([token])
}

model Post {
    id          Int       @id @default(autoincrement())
    authorId    Int       @map("author_id")
    title       String
    publishDate DateTime  @default(now()) @map("publish_date")
    status      PostStatus @default(ACTIVE)
    content     String

    author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
    categories  Category[] @relation("PostCategories")
    comments    Comment[] 
    likes       Like[]    @relation("PostLikes")

    @@index([authorId])
}

model Comment {
    id          Int       @id @default(autoincrement())
    authorId    Int       @map("author_id")
    postId      Int       @map("post_id")
    publishDate DateTime  @default(now()) @map("publish_date")
    content     String
    status      String    @default("ACTIVE")

    author      User      @relation(fields: [authorId], references: [id])
    post        Post      @relation(fields: [postId], references: [id])
    likes       Like[]    
}

model Like {
    id         Int       @id @default(autoincrement())
    authorId   Int       @map("author_id")
    postId     Int?      @map("post_id")     
    commentId  Int?      @map("comment_id")
    type       LikeType
    status     String    @default("ACTIVE")

    author     User      @relation(fields: [authorId], references: [id])
    post       Post?     @relation("PostLikes", fields: [postId], references: [id])
    comment    Comment?  @relation(fields: [commentId], references: [id])

    @@index([authorId, postId, commentId])
}

model Category {
    id          Int       @id @default(autoincrement())
    title       String
    description String?

    posts       Post[]    @relation("PostCategories")
}